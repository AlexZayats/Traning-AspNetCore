@page "/products"

@using Traning.AspNetCore.Blazor.Web.Data
@using Traning.AspNetCore.EntityFramework.Logic.Models

@inject ProductsService ProductsService
@inject NavigationManager NavigationManager

<h1>Products</h1>

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <div class="form-row align-items-center">
            <div class="col-auto">
                <input type="text" class="form-control mb-2" @bind="Search">
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-primary mb-2" @onclick="SearchClick">Search</button>
            </div>
            @if (!string.IsNullOrEmpty(Search))
            {
                <div class="col-auto">
                    <button type="button" class="btn btn-primary mb-2" @onclick="ClearClick">Clear</button>
                </div>
            }
        </div>
    </form>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in result.Items)
            {
                <tr>
                    <td><a href="/product/@product.Id">@product.Name</a></td>
                    <td>@product.Description</td>
                    <td>@product.TotalPrice</td>
                </tr>
            }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" @onclick="CreateClick">Create</button>
}

@code {
    private PagedResult<ProductDto> result;

    protected string Search { get; set; }

    protected async Task LoadProducts()
    {
        result = await ProductsService.GetProducts(Search);
    }

    protected override async Task OnInitializedAsync()
    {
        Search = "";
        await LoadProducts();
    }

    protected void CreateClick()
    {
        NavigationManager.NavigateTo("/product");
    }

    protected async Task ClearClick()
    {
        Search = "";
        await LoadProducts();
    }

    protected async Task SearchClick()
    {
        await LoadProducts();
    }
}
